<script src="/static/admin/js/pusher.min.js"></script>

<script>

    let pusher = new Pusher("{{.PreferenceMap["pusher-key"]}}", {
        authEndPoint: "/pusher/auth",
        wsHost: "localhost",
        wsPort: 4001,
        forceTLS: false,
        enabledTransports: ["ws", "wss"],
        disableTransports: []
    });

    let publicChannel = pusher.subscribe("public-channel");
    let privateChannel = pusher.subscribe("private-channel-{{.User.ID}}");

    privateChannel.bind("private-message", function(data) {
        attention.alert({
            html: data.message,
            icon: 'success',
        });
    });

    publicChannel.bind("app-starting", function(data) {
        let toggle = document.getElementById("monitoring-live");
        toggle.checked = true;
        successAlert(data.message);
    });
    
    publicChannel.bind("app-stopping", function(data) {
        warningAlert(data.message);
        let toggle = document.getElementById("monitoring-live");
        toggle.checked = false;

        let scheduledTableExists = !!document.getElementById("schedule-table");
        if(scheduledTableExists) {
            let scheduleTable = document.getElementById("schedule-table");
            scheduleTable.tBodies[0].innerHTML = "";

            let newRow = scheduleTable.tBodies[0].insertRow(-1);
            let newCell = newRow.insertCell(0);
            newCell.setAttribute("colspan", "5");
            newCell.innerHTML = "No scheduled checks!";
        }
    });

    publicChannel.bind("schedule-item-removed-event", function(data){
        let rowExists = !!document.getElementById("schedule-" + data.host_service_id);
        if (rowExists) {
            let row = document.getElementById("schedule-" + data.host_service_id);
            row.parentNode.removeChild(row);

            // Check to see if we have to add a "No scheduled checks" row
            // The table exists, so get a reference to it
            let currentTable = document.getElementById("schedule-table");

            // If the number of rows in the table is one, the only row left is the header,
            // So we need to insert a  "No services" row in the table body
            if (currentTable.rows.length === 1) {
                // Add in a "No services" row with colspan 3
                let newRow = currentTable.tBodies[0].insertRow(-1);
                let newCell = newRow.insertCell(0);
                newCell.setAttribute("colspan", "5");
                newCell.innerHTML = "No scheduled checks!";
            }
        }
    });

    publicChannel.bind("schedule-changed-event", function(data) {
        let scheduledTableExists = !!document.getElementById("schedule-table");
        if (scheduledTableExists) {
            // Get a reference to the table
            let scheduleTable = document.getElementById("schedule-table");

            // Check to see if we have to delete the "No scheduled checks" row
            let tableContent = scheduleTable.innerHTML;
            if (tableContent.includes("No scheduled checks!")) {
                // We have a "no scheduled checs" row, so delete it
                let rowCount = scheduleTable.rows.length;
                for (let i = rowCount - 1; i > 0; i--) {
                    scheduleTable.deleteRow(i);
                }
            }

            // Delete existing row
            let rowExists = !!document.getElementById("schedule-" + data.host_service_id);
            if (rowExists) {
                let row = document.getElementById("schedule-" + data.host_service_id);
                row.parentNode.removeChild(row);
            }
            let newRow = scheduleTable.tBodies[0].insertRow(-1);
            newRow.setAttribute("id", "schedule-" + data.host_service_id);

            let newCell = newRow.insertCell(0);
            let newText = document.createTextNode(data.host);
            newCell.appendChild(newText);

            newCell = newRow.insertCell(1)
            newText = document.createTextNode(data.service);
            newCell.appendChild(newText);

            newCell = newRow.insertCell(2)
            newText = document.createTextNode(data.schedule);
            newCell.appendChild(newText);

            newCell = newRow.insertCell(3)
            newText = document.createTextNode(data.last_run);
            newCell.appendChild(newText);

            newCell = newRow.insertCell(4)
            if (data.next_run === undefined) {
                newText = document.createTextNode("Pending...");
            } else {
                newText = document.createTextNode(data.next_run);
            }

            newCell.appendChild(newText);
        }
    });
    
    publicChannel.bind("host-service-status-changed", function(data) {
        // Alert user to status change with toast
        attention.toast({
            msg: data.message,
            icon: 'info',
            time: 8000,
            showCloseButton: true,
        })

        // Delete from if it exists
        deleteHostServiceRow(data.host_service_id);

        // Add new if table exists
        updateHostServiceTable(data);
    });

    function deleteHostServiceRow(hostServiceID) {
        // Remove existing table row if it exists
        let exists = !!document.getElementById("host-service-" + hostServiceID);
        if (exists) {
            let row = document.getElementById("host-service-" + hostServiceID);
            row.parentNode.removeChild(row);

            // If this was the last row, add a "no services" row
            // We don't know what table might exist, so check them all

            // First, set up an array with the appropriate status names
            let tables = ["healthy", "pending", "warning", "problem"];

            for (let i = 0; i < tables.length; i++) {
                // Check to see if the table exists
                let currentTableExists = !!document.getElementById(tables[i] + "-table");
                if (currentTableExists) {
                    // The table exists, so get a reference to it
                    let currentTable = document.getElementById(tables[i] + "-table");

                    // If the number of rows in the table is one, the only row left is the header,
                    // So we need to insert a  "No services" row in the table body
                    if (currentTable.rows.length === 1) {
                        // add in a "No services" row with colspan 3
                        let newRow = currentTable.tBodies[0].insertRow(-1);
                        let newCell = newRow.insertCell(0);
                        newCell.setAttribute("colspan", "3");
                        newCell.innerHTML = "No services";
                    }
                }
            }
        }
    }

    function updateHostServiceTable(data) {
        let tableExists = !!document.getElementById(data.status + "-table");
        if (tableExists) {
            // Get a reference to the correct table
            let tableRef = document.getElementById(data.status + "-table");

            // Check the table we are inserting into to see if "no services" message exists; if it does, delete it
            let tableContent = tableRef.innerHTML;
            if (tableContent.includes("No services")) {
                // We have a "no services" row, so delete it
                let rowCount = tableRef.rows.length;
                for (let i = rowCount - 1; i > 0; i--) {
                    tableRef.deleteRow(i);
                }
            }

            // Insert new row and give it correct id
            let newRow = tableRef.tBodies[0].insertRow(-1);
            newRow.setAttribute("id", "host-service-" + data.host_service_id);

            // Insert the first td
            let newCell = newRow.insertCell(0);
            newCell.innerHTML = `<span class="${data.icon}"></span> ${data.service_name}
                <span class="badge bg-secondary pointer" onclick="checkNow(${data.host_service_id}, '${data.status}')">
                    Check Now
                </span>`;

            // Insert second td
            newCell = newRow.insertCell(1);
            if (data.status !== "pending") {
                newCell.innerHTML = `${data.last_check}`;
            } else {
                newCell.innerHTML = "Pending...";
            }

            // Insert third td (currently empty)
            newRow.insertCell(2);
        }
    }
    
    publicChannel.bind("host-service-count-changed", function(data) {
        let healthyCountExists = !!document.getElementById("healthy_count");
        if(healthyCountExists) {
            document.getElementById("healthy_count").innerHTML = data.healthy_count;
            document.getElementById("problem_count").innerHTML = data.problem_count;
            document.getElementById("pending_count").innerHTML = data.pending_count;
            document.getElementById("warning_count").innerHTML = data.warning_count;
        }
    });


    // Things to look for
    // - service goes down
    // - service comes up
    // - services status changed
    // - schedule changed
    // - monitoring is turned off 
    // - next-run-event changes

    let attention = Prompt();

    {{if .Flash != ""}}
        successAlert('{{.Flash}}')
    {{end}}

    {{if .Warning != ""}}
        warningAlert('{{.Warning}}')
    {{end}}

    {{if .Error != ""}}
        errorAlert('{{.Error}}')
    {{end}}

    document.addEventListener("DOMContentLoaded", function () {
        let tabMap = new Map();
        let tabs = document.querySelectorAll('[data-toggle="tab"]');
        let i = 0;
        Array.prototype.filter.call(tabs, function (el) {
            el.addEventListener("click", function () {
                history.pushState("", document.title, window.location.pathname);
                localStorage.setItem('activeTab', el.getAttribute("data-target"));
            })

            tabMap.set(el.getAttribute("href"), i);
            i++;
        });

        if (!window.location.hash) {
            let activeTab = localStorage.getItem('activeTab');
            if (activeTab) {
                document.querySelectorAll('[data-toggle="tab"]')[activeTab].Tab.show()
            }
        } else {
            if (tabMap.has(window.location.hash)) {
                document.querySelectorAll('[data-toggle="tab"]')[tabMap.get(window.location.hash)].Tab.show()
            }
        }


        document.getElementById("monitoring-live").addEventListener("change", function(){
            let enabled = document.getElementById("monitoring-live").checked;
            if (!enabled) {
                attention.confirm({
                    html: "This will stop monitoring of all hosts and services. Are you sure?",
                    callback: function(result) {
                        if (result) {
                            // Want to turn monitoring off
                            updateSystemPref("monitoring_live", "0");
                            toggleMonitoring(0);
                        } else {
                            document.getElementById("monitoring-live").checked = true;
                        }
                    }
                })
            } else {
                updateSystemPref("monitoring_live", "1");
                toggleMonitoring(1);
            }
        })
    });
    
    function updateSystemPref(prefName, prefValue) {
        let formData = new FormData();
        formData.append("pref_name", prefName);
        formData.append("pref_value", prefValue);
        formData.append("csrf_token", "{{.CSRFToken}}");
        let ajax = new XMLHttpRequest();
        ajax.responseType = "json";
        ajax.open("POST", "/admin/preference/ajax/set-system-pref");
        ajax.send(formData);
        ajax.onreadystatechange = function() {
            if (ajax.readyState === 4) {
                let resp = ajax.response;
                if (!resp.ok) {
                    errorAlert("Errors: " + resp.message);
                }
            }
        }
    }

    function toggleMonitoring(enabled) {
        let formData = new FormData();
        formData.append("enabled", enabled);
        formData.append("csrf_token", "{{.CSRFToken}}");
        let ajax = new XMLHttpRequest();
        ajax.responseType = "json";
        ajax.open("POST", "/admin/preference/ajax/toggle-monitoring");
        ajax.send(formData);
        ajax.onreadystatechange = function() {
            if (ajax.readyState === 4) {
                let resp = ajax.response;
                if (!resp.ok) {
                    errorAlert("Errors: " + resp.message);
                }
            }
        }
    }
</script>
